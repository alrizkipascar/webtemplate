// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    // bio           String?
    accounts      Account[]
    sessions      Session[]
    topics        Topic[]
    notes         Note[]
    // followedBy Follows[] @relation("following")
    // following  Follows[] @relation("follower")
    // liked      TopicLike[] @relation("likes")
}

// model Follows {
//     follower    User @relation("follower", fields: [followerId], references: [id])
//     followerId  String
//     following   User @relation("following", fields: [followingId], references: [id])
//     followingId String
    
//     @@id([followerId, followingId])
// }

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}


model Topic {
    id          String      @id @default(cuid())
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
    title       String
    content     String      @db.Text
    user        User        @relation(fields: [userId], references: [id])
    userId      String
    notes       Note[]
    image       String?
    tag         String?
    // likeBy      TopicLike[] @relation("likedTopic")
}

// model TopicLike {
//     likes    User @relation("likes", fields: [userId], references: [id])
//     userId  String
//     likedTopic    Topic @relation("likedTopic", fields: [topicId], references: [id])
//     topicId  String
//       @@id([userId, topicId])

// }

model Note {
    id          String      @id @default(cuid())
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
    title       String
    content     String      @db.Text
    topic       Topic       @relation(fields: [topicId],references: [id])
    topicId     String
    user        User        @relation(fields: [userId], references: [id])
    userId      String
    image       String?
}

model Tags {
    id          String      @id
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
    tag         String
}